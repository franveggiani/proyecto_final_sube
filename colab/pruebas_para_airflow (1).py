# -*- coding: utf-8 -*-
"""Pruebas para airflow.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OXB2hlzu5Gy8llJH-nU3NNu0vcs0d7wI
"""

import pandas as pd

df = pd.read_csv("/content/dat-ab-usos-2024.csv")

df.head()

from google.colab import drive
drive.mount('/content/drive')

df = df.rename(columns={
        "DIA_TRANSPORTE": "fecha",
        "PROVINCIA": "provincia",
        "MUNICIPIO": "municipio",
        "NOMBRE_EMPRESA": "empresa",
        "LINEA": "linea",
        "AMBA": "amba",
        "TIPO_TRANSPORTE": "tipo_transporte",
        "JURISDICCION": "jurisdiccion",
        "CANTIDAD": "cantidad",
        "DATO_PRELIMINAR": "dato_preliminar"})

df.head()

df = df.drop(columns=["dato_preliminar", "amba", "jurisdiccion"])

df.columns.to_list()

# Obtengo las provincias y los municipios para obtener posteriormente las coordenadas
input_coord = df[['provincia', 'municipio']].drop_duplicates().reset_index(drop=True)

input_coord['municipio']

import requests, pandas as pd, time
from pathlib import Path

def fetch_all_municipios(aplanar=True):
    url = "https://apis.datos.gob.ar/georef/api/municipios"
    params = {
        "aplanar": "true" if aplanar else "false",
        "max": 5000,   # alto para minimizar páginas
        "inicio": 0
    }
    frames = []
    total = None
    while True:
        r = requests.get(url, params={k:v for k,v in params.items() if v is not None}, timeout=30)
        r.raise_for_status()
        js = r.json()
        if total is None:
            total = js.get("total")
            print(f"Esperados (total): {total}")
        munis = js.get("municipios", [])
        if not munis:
            break
        frames.append(pd.DataFrame(munis))
        params["inicio"] += len(munis)
        print(f"Acumulados: {params['inicio']}")
        if params["inicio"] >= total:
            break
        time.sleep(0.15)  # cortesía
    df = pd.concat(frames, ignore_index=True)
    return df

df_coords = fetch_all_municipios(aplanar=True)

# Renombre prolijo
df_coords = df_coords.rename(columns={
    "nombre": "municipio",
    "provincia_nombre": "provincia",
    "centroide_lat": "lat",
    "centroide_lon": "lon"
})[["provincia","municipio","lat","lon"]]

# sanity check
print(df_coords.shape)         # ~2.3k filas típicamente
print(df_coords.head())

import unicodedata
import re
def quitar_tildes(texto) -> str:
    if texto is None:
        return None

    if pd.isna(texto):   # si es NaN -> devolvé None o string vacío
        return None

    # Normaliza (NFKD = compatibilidad, descompone caracteres con tilde)
    nfkd = unicodedata.normalize("NFKD", texto)
    # Elimina marcas de acento
    return "".join([c for c in nfkd if not unicodedata.combining(c)])

# Normalizo nombre de ambos dataframes para finalmente unir

# Coordenadas
df_coords['municipio'] = df_coords['municipio'].apply(quitar_tildes).str.lower().str.strip()
df_coords['provincia'] = df_coords['provincia'].apply(quitar_tildes).str.lower().str.strip()

df_coords.head()

# DF input_coord
input_coord['municipio'] = input_coord['municipio'].apply(quitar_tildes).str.lower().str.strip()
input_coord['provincia'] = input_coord['provincia'].apply(quitar_tildes).str.lower().str.strip()

input_coord.head(10)

# Hacemos el merge de todos los datos

df_merged = pd.merge(
    left=input_coord,
    right=df_coords,
    how="left",
    on=['provincia', 'municipio'])

df_merged.head(10)

## Vistazo a los 20 municipios sin latitud ni longitud
df_merged[df_merged['lat'].isna()]

# Eliminamos NaNs
df_merged = df_merged.dropna()

# Observamos nuevamente
df_merged[df_merged['lat'].isna()]

"""### EJEMPLO DE CONSULTA

curl "https://archive-api.open-meteo.com/v1/archive?latitude=-37.9657&longitude=-57.7430&start_date=2025-08-15&end_date=2025-08-15&daily=temperature_2m_max,temperature_2m_min&timezone=America%2FArgentina%2FBuenos_Aires"

Y DEVUELVE

{
  "latitude": -37.996487,
  "longitude": -57.70163,
  "generationtime_ms": 0.06496906280517578,
  "utc_offset_seconds": -10800,
  "timezone": "America/Argentina/Buenos_Aires",
  "timezone_abbreviation": "GMT-3",
  "elevation": 82,
  "daily_units": {
    "time": "iso8601",
    "temperature_2m_max": "°C",
    "temperature_2m_min": "°C"
  },
  "daily": {
    "time": [
      "2025-08-15"
    ],
    "temperature_2m_max": [
      10.6
    ],
    "temperature_2m_min": [
      1.2
    ]
  }
}

"""

import requests, time
import pandas as pd
from math import isnan

# Parámetros
fecha_inicio = "2024-01-01"
fecha_fin = "2024-12-31"
tz = "America/Argentina/Mendoza"

rows = []

for i, row in df_merged.iterrows():
    lat = row["lat"]
    lon = row["lon"]

    try:
        resp = requests.get(
            "https://archive-api.open-meteo.com/v1/archive",
            params={
                "latitude": float(lat),
                "longitude": float(lon),
                "start_date": fecha_inicio,
                "end_date": fecha_fin,  # mismo día
                "daily": "temperature_2m_max,temperature_2m_min,precipitation_sum,windspeed_10m_max",
                "timezone": tz,
            },
            timeout=30,
        )
        resp.raise_for_status()
        js = resp.json()
        daily = js.get("daily", {})
        if daily and daily.get("time"):
            rows.append({
                "provincia": row["provincia"],
                "municipio": row["municipio"],
                "lat": float(lat),
                "lon": float(lon),
                "fecha": daily["time"][0],
                "tmax": daily["temperature_2m_max"][0],
                "tmin": daily["temperature_2m_min"][0],
                "precip": daily["precipitation_sum"][0],
                "viento": daily["windspeed_10m_max"][0],
            })
    except Exception as e:
        print(f"ERROR en fila {i} ({row['provincia']} - {row['municipio']}): {e}")
        pass

    # pequeña pausa de cortesía para no martillar la API
    time.sleep(0.05)

df_clima = pd.DataFrame(rows)

# Vemos los resultados
df_clima.tail()

df_feriados = pd.read_json("/content/api.argentinadatos.com.json")

df_feriados.head()

df = pd.merge(
    left=df,
    right=df_clima,
    how="left",
    on=['fecha'])

df.head()

df_final = pd.merge(
    left=df,
    right=df_feriados,
    how="left",
    on=['fecha'])

df_final.head(100)

df_final = df_final.drop(columns=["tipo", "lat","lon"])

df_final.columns.to_list()

df_final.head()

df.to_csv("final.csv", index = False)